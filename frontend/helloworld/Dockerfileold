# BUILD STAGE #
#FROM maven:3.8.3-openjdk-17 AS build
#COPY src /home/app/backend/src
#COPY pom.xml /home/app/backend
#RUN mvn -f /home/app/backend/pom.xml clean package

# RUN STAGE #
#FROM openjdk:17-alpine
#COPY --from=build /home/app/backend/target/helloworld-0.0.1-SNAPSHOT.jar /usr/local/lib/helloworld-0.0.1-SNAPSHOT.jar
#EXPOSE 8080
#ENTRYPOINT ["java","-jar","/usr/local/lib/helloworld-0.0.1-SNAPSHOT.jar"]

#FROM node:20.4.0-buster AS build
#WORKDIR /home/app/frontend/
#COPY package.json package-lock.json ./
#RUN npm ci
#COPY . .
#RUN npm run build
#EXPOSE 4200
#ENTRYPOINT ["npm", "start"]

#FROM node:20.4.0-buster AS build
#WORKDIR /home/app/frontend
#COPY . .
#RUN npm install
#RUN npm run build

# Serve Application using Nginx Server
#FROM nginx:alpine
#COPY --from=build /app/dist/helloworld/ /usr/share/nginx/html
#EXPOSE 80



#FROM node:20.4.0-buster AS build
#WORKDIR /app
#COPY package*.json ./
#RUN npm install
#COPY . .
#RUN npm run build
#EXPOSE 4200
#CMD ["npm", "start"]

FROM node:20.4.0-buster AS build
WORKDIR /app
RUN npm install -g @angular/cli
COPY ./package.json .
RUN npm install
COPY . .
RUN ng build

# Serve Application using Nginx Server
FROM nginx:alpine as runtime
COPY --from=build /app/dist/project-name/ /usr/share/nginx/html
EXPOSE 80
